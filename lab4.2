open System
type Tree =
    | Лист of string
    | Корень of string * Tree * Tree

let printtree (tree: Tree) =
    let rec printtreerec (tree: Tree) (k: int) =
        let kstring = String.replicate k "|  "
        match tree with
        | Лист value -> printfn $"{kstring}|_ {value}"
        | Корень (value, left, right) ->
            printfn $"{kstring}|_ {value}"
            printTreeInternal left (k + 1)
            printTreeInternal right (k + 1)
    printtreerec tree 0

let posik (n: string) (v: string) : int =
    match n.Contains(v) with
    | true -> 1
    | false -> 0

let rec foldtree (tree: Tree) (v: string) : int =
    match tree with
    | Лист (str) -> posik str v
    | Корень (str, left, right) -> posik str v + foldtree left v + foldtree right v

let rec vvod x =
    printf "Введите символ: "
    let input = Console.ReadLine()
    match input.Length = 1 with
    | true -> input
    | false ->
        printfn "Некорректный ввод. Пожалуйста, введите символ."
        vvod x

let mytree = Корень("000", Корень("012", Лист("111"), Корень("123", Лист("222"), Лист("333"))), Корень("234", Лист("444"), Лист("4566")))
let v = vvod()
let chisl = foldtree mytree v
printtree mytree
printf "Количество узлов с '%s' в дереве: %i" v chisl
