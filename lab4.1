open System
type Tree =
    | Лист of int
    | Корень of int * Tree * Tree

let printtree (tree: Tree) =
    let rec printtreerec (tree: Tree) (k: int) =
        let kstring = String.replicate k "|  "
        match tree with
        | Лист value -> printfn $"{kstring}|_ {value}"
        | Корень (value, left, right) ->
            printfn $"{kstring}|_ {value}"
            printTreeInternal left (k + 1)
            printTreeInternal right (k + 1)
    printtreerec tree 0

let posik (n: int) (zam: int) : int =
    let rec posikrec (num: int) (minac: int) (k:float) (ac: float): int =
        if num = 0 then
            let ytr = (10.**ac)*(float (zam - minac))
            int ytr
        else
            let num10 : int = num % 10
            let newmin : int = min minac num10
            if newmin=num10 then posikrec (num / 10) newmin (k+1.) k
            else posikrec (num / 10) newmin (k+1.) ac
    n+posikrec n 9 0 0
    
let rec maptree (tree: Tree) (zam : int) : Tree =
    match tree with
    | Лист (num) -> Лист (posik num zam)
    | Корень (num, left, right) ->
        Корень (posik num zam, maptree left zam, maptree right zam)

let rec vvod x : int =
    printf "Введите цифру: "
    let input = Console.ReadLine()
    match Int32.TryParse(input) with
    | true, num -> (if num<10 && num>0 then num
        else printfn "Некорректный ввод. Пожалуйста, введите цифру."
             vvod x)
    | false, _ ->
        printfn "Некорректный ввод. Пожалуйста, введите цифру."
        vvod x

let mytree = Корень(192, Корень(212, Лист(453), Лист(5884)), Корень(3330, Лист(6112), Лист(7092)))
let newtree = maptree mytree (vvod())
printtree mytree
printtree newtree
